Section 1: Working with Schemas & Data Types

1. Create database and collection
use trainingdb;

2. Insert 4 employees
db.employees.insertMany([
  {
    name: "Max Verstappen",
    age: 26,
    isManager: true,
    skills: ["JavaScript", "Python", "Leadership"],
    joiningDate: new Date("2020-01-15"),
    profile: {
      linkedin: "linkedin.com/in/maxv",
      portfolio: "maxv.dev"
    }
  },
  {
    name: "Lando Norris",
    age: 24,
    isManager: false,
    skills: ["React", "Node.js"],
    joiningDate: new Date("2021-03-22"),
    profile: {
      linkedin: "linkedin.com/in/landon",
      portfolio: "landon.dev"
    }
  },
  {
    name: "Carlos Sainz",
    age: 29,
    isManager: false,
    skills: ["Java", "Spring", "SQL"],
    joiningDate: new Date("2019-11-05"),
    profile: {
      linkedin: "linkedin.com/in/carloss",
      portfolio: "carloss.dev"
    }
  },
  {
    name: "Charles Leclerc",
    age: 26,
    isManager: true,
    skills: ["Python", "Data Analysis", "Machine Learning"],
    joiningDate: new Date("2022-06-10"),
    profile: {
      linkedin: "linkedin.com/in/charlesl",
      portfolio: "charlesl.dev"
    }
  }
]);

3. Query employees with more than 2 skills
db.employees.find({ "skills.2": { $exists: true } })

4. Query employees joined after specific date (2021-01-01)
db.employees.find({ joiningDate: { $gt: new Date("2021-01-01") } });

5. Add rating field to one employee
db.employees.updateOne(
  { name: "Max Verstappen" },
  { $set: { rating: 4.5 } }
);

6. Find employees with rating field of type double
db.employees.find({ rating: { $type: "double" } });

7. Exclude _id and show only name and skills
db.employees.find({}, { _id: 0, name: 1, skills: 1 });


-------------------------------------------------------

Section 2: One-to-One (Embedded)

1. Create database and collection
use schooldb;

2. Insert 3 students with embedded guardian
db.students.insertMany([
  {
    name: "Oscar Piastri",
    grade: 10,
    guardian: {
      name: "Mrs. Piastri",
      phone: "1234567890",
      relation: "Mother"
    }
  },
  {
    name: "George Russell",
    grade: 11,
    guardian: {
      name: "Mr. Russell",
      phone: "2345678901",
      relation: "Father"
    }
  },
  {
    name: "Pierre Gasly",
    grade: 9,
    guardian: {
      name: "Mrs. Gasly",
      phone: "3456789012",
      relation: "Mother"
    }
  }
]);

3. Query students where guardian is "Mother"
db.students.find({ "guardian.relation": "Mother" });

4. Update guardian's phone for a specific student
db.students.updateOne(
  { name: "Oscar Piastri" },
  { $set: { "guardian.phone": "9876543210" } }
);


----------------------------------

Section 3: One-to-Many (Embedded)

1. Create teachers collection in schooldb
db.teachers.insertMany([
  {
    name: "Fernando Alonso",
    classes: ["Math", "Physics"]
  },
  {
    name: "Lewis Hamilton",
    classes: ["History", "English"]
  },
  {
    name: "Sebastian Vettel",
    classes: ["Physics", "Chemistry"]
  }
]);

2. Query teachers who teach "Physics"
db.teachers.find({ classes: "Physics" });

3. Add "Robotics" to a specific teacher's classes
db.teachers.updateOne(
  { name: "Fernando Alonso" },
  { $push: { classes: "Robotics" } }
);

4. Remove "Math" from one teacher's class list
db.teachers.updateOne(
  { name: "Fernando Alonso" },
  { $pull: { classes: "Math" } }
);


----------------------------------

Section 4: One-to-Many (Referenced)

1. Create database and collections
use academia;

2. Insert courses
db.courses.insertMany([
  { _id: 1, title: "Computer Science", credits: 4 },
  { _id: 2, title: "Machine Learning", credits: 3 },
  { _id: 3, title: "Data Structures", credits: 3 }
]);

3. Insert students with course references
db.students.insertMany([
  { name: "Yuki Tsunoda", enrolledCourse: 1 },
  { name: "Daniel Ricciardo", enrolledCourse: 2 },
  { name: "Esteban Ocon", enrolledCourse: 3 },
  { name: "Valtteri Bottas", enrolledCourse: 2 }
]);

4. Query students enrolled in specific course (Machine Learning - id 2)
db.students.find({ enrolledCourse: 2 });

5. Query course details separately using referenced _id
db.courses.find({ _id: 2 });

----------------------------------

Section 5: $lookup (Join in Aggregation)

1. Use academia database
use academia;

2. $lookup to join students with courses
db.students.aggregate([
  {
    $lookup: {
      from: "courses",
      localField: "enrolledCourse",
      foreignField: "_id",
      as: "courseDetails"
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      "courseDetails.title": 1
    }
  }
]);

3. With $match for "Machine Learning" course
db.students.aggregate([
  {
    $lookup: {
      from: "courses",
      localField: "enrolledCourse",
      foreignField: "_id",
      as: "courseDetails"
    }
  },
  {
    $match: {
      "courseDetails.title": "Machine Learning"
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      "courseDetails.title": 1
    }
  }
]);

